SECTIONS {
  /* See Note [Setting the location counter] */
  . = 0x0;

  .text : SUBALIGN(0) /* See Note [.text section alignment] */ {
    *(.text.entrypoint)
    *(.text .text.*)
  }

  .rodata : {
    *(.rodata .rodata.*)
  }

  /DISCARD/ : {
	*(.comment*)
  }
}

/* Note [Setting the location counter]

The code generated by Rust is quite position-independent, so the kernel runs fine
when it's loaded at a non-0x0 virtual address. I'm not sure what conditions would require
setting the location counter to the kernel's virtual address (see also Note [The kernel's
virtual address]).
*/

/* Note [.text section alignment]

Since we're building a flat binary, our text sections don't have any alignment requirements.
*/
